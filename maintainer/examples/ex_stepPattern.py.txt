>>> from dtw import *
>>> import numpy as np

The usual (normalizable) symmetric step pattern
Step pattern recursion, defined as:
 g[i,j] = min(
   g[i,j-1] + d[i,j] ,
   g[i-1,j-1] + 2 * d[i,j] ,
   g[i-1,j] + d[i,j] ,
)


>>> print(symmetric2)		 #doctest: +NORMALIZE_WHITESPACE
Step pattern recursion:
 g[i,j] = min(
     g[i-1,j-1] + 2 * d[i  ,j  ] ,
     g[i  ,j-1] +     d[i  ,j  ] ,
     g[i-1,j  ] +     d[i  ,j  ] ,
 )
<BLANKLINE>
Normalization hint: N+M
<BLANKLINE>


The well-known plotting style for step patterns

>>> #TODO plot(symmetricP2,main="Sakoe's Symmetric P=2 recursion")




Same example seen in ?dtw , now with asymmetric step pattern

>>> (query, reference) = sin_cos_data()

Do the computation

>>> asy = dtw(query,reference,keep_internals=True,step_pattern=asymmetric);


>>> #TODO dtwPlot(asy,type="density",main="Sine and cosine, asymmetric step")




Hand-checkable example given in [Myers1980] p 61

>>> tm = numpy.reshape( [1, 3, 4, 4, 5, 2, 2, 3, 3, 4, 3, 1, 1, 1, 3, 4, 2,
...                      3, 3, 2, 5, 3, 4, 4, 1], (5,5), "F" )

